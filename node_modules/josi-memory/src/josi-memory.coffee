# Description:
#
# Dependencies:
#   ./responder.coffee
#   ./learned.coffee
# 
#   None
#
# Configuration:
#   None
#
# Commands:
#   hubot when i say <key> you (say|do) <command> - Command Aliases!
# 
# Notes:
#
# Author:
#  Jolly Science

TextMessage = require('hubot').TextMessage

class Learn
  @robot = {}

  constructor: (@robot) ->
    @cache = []

    @robot.brain.on 'loaded', =>
      if @robot.brain.data.learned
        @cache = @robot.brain.data.learned

    @robot.hear /(.+)/i, (msg) ->
      # stop right here if ...
      # - hubot said it
      # - it was said directly to hubot
      if (@robot.name != msg.message.user.name && !(new RegExp("^#{@robot.name}", "i").test(robotHeard)))
        robotHeard = msg.match[1]
        if @cache
          # check for all of the ones i know...
          for task in @cache
            # find the match
            if new RegExp(task.key, "i").test(robotHeard)
              # do the deed...
              @robot.receive new TextMessage(msg.message.user, "#{@robot.name}: #{task.task}")

    @robot.respond /(.+)/i, (msg) ->
      robotHeard = msg.match[1]
      if @cache
        # check for all of the ones i know...
        for task in @cache
          console.log task
          # pretend i really heard something else...
          @robot.receive new TextMessage(msg.message.user, "#{@robot.name}: #{task.task}")

  add: (pattern, action) ->
    task = {key: pattern, task: action}
    @cache.push task
    @robot.brain.data.learned = @cache

  all: -> @cache

  deleteByPattern: (pattern) ->
    @cache = @cache.filter (n) -> n.key != pattern
    @robot.brain.data.learned = @cache

  deleteAll: () ->
    @cache = []
    @robot.brain.data.learned = @cache

  say: (pattern, response) ->
    callback = "say \"#{response}\""
    @add pattern, callback

  # leverage learned for actionable patterns...
  do: (pattern, response) ->
    callback = "#{response}"
    @add pattern, callback


module.exports = (robot) ->

  robot.learn = new Learn robot

  # Report all Josi Modules
  robot.respond /persona/i, (msg) ->
    msg.send "JoSi Memory - Loaded"

  # Teachable...
  robot.respond /when i say (.+?) you (say|do) (.+?)$/i, (msg) ->
    # The coolest line of code I've ever written...
    learnt = robot.learn[msg.match[2]] msg.match[1], msg.match[3]
    if learnt
      msg.send "Got it. From now on, I'll #{msg.match[2]} #{msg.match[3]} when you say #{msg.match[1]}."
    else
      msg.send "I'd like to respond to /#{msg.match[1]}/ but something went wrong."

  # Testable...
  robot.respond /(say|repeat|echo|parrot) "(.+?)"$/i, (msg) ->
    msg.send "/me is clearing her throat..."
    msg.send "/quote #{msg.match[2]}"

  # Retrainable...
  robot.respond /forget (.+)/i, (msg) ->
    pattern = msg.match[1]
    if robot.learn.deleteByPattern pattern
      msg.send("I'll stop responding to /#{pattern}/.")
    else
      msg.send("I wasn't responding to /#{pattern}/ anyway.")