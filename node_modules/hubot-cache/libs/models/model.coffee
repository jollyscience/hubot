Deferred = require "JQDeferred"

chai = require 'chai'
expect = chai.expect
should = chai.should()

class Model
  id: null
  namespace: null
  
  validation:
    id:
      name: 'id'
      message: 'It should be an integer'
      validation: (data) ->
        data.should.be.a('number')

  constructor: (@name) ->
    dataObj = {}

    @get = (key) ->
      if key?
        if dataObj[key]? then return dataObj[key] else return undefined
      else
        return dataObj 
    
    @set = (key, val) ->
      if val and @validateField(key, val)
        dataObj[key] = val
      else if key? and typeof key is 'object' then dataObj = key


  validateField: (key, value) ->
    unless @validation[key]? then return value

    @validation[key].validation(value)


  validate: () ->
    for dataItem in @validation
      describe dataItem.name ->
        it "I need the value for #{dataItem.name}. #{dataItem.message}", (done) ->
          dataItem.check()

root = exports ? window
root.Model = Model