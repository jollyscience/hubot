Deferred = require "JQDeferred"
HUBOT_PUBLIC_URL = process.env.HUBOT_PUBLIC_URL || ""

extend = (obj, mixin) ->
  obj[name] = method for name, method of mixin        
  obj

include = (klass, mixin) ->
  extend klass.prototype, mixin

class Process
	conversation: null
	needs: null
	activeModel: null
	models: []
	params: null

	on:
		complete: []
		step: []
		error: []
		cancel: []

	constructor: (@msg) ->
		extend @, Deferred()
		#parse listens for and set initial variables	
		if @msg.message.text?
			@parseParams?(@msg.message.text.match @listensFor)

		if @needs?
			for Model in @needs
				@models.push new Model()

		return @

	parseParams: (matches) ->
		console.log matches
		return @

	urlEntry: ->
		random = Math.floor(Math.random()*1000)		
		theRoute = "/hubot/process/#{random}"
		@msg.send "You've started a process. You can fill out the required information at #{HUBOT_PUBLIC_URL}#{theRoute}"
		@msg.robot.router.get theRoute, @getForm
		@msg.robot.router.post theRoute, @postForm
		# robot.messageRoom "Hey! I was accessed via URL"

		@done ->
			@msg.robot.router.routes.get = @msg.robot.router.routes.get.filter (route) ->
			  route.path isnt theRoute

			@msg.robot.router.routes.post = @msg.robot.router.routes.post.filter (route) ->
			  route.path isnt theRoute

			@msg.send "Looks like I have everything I need! Process has been completed!"


	getForm: (req, res) =>
        form = "<input name="
        res.send "JoSi here. You've started a process!"

	postForm: (req, res) =>
		if req.body.user? and req.body.user.name?
		  @resolve()
		  res.send "Process complete! You'll no longer be able to access this URL. Please go back to the chat window to continue our conversation"
		else
		  res.json res.body



module.exports = Process