class HubotCache
  conversations: {}
  cachedResponses: {}
  
  constructor: (@robot) ->
    @robot.Response.prototype.send = (strings...) ->
      if @message.conversation_entry?
        @message.conversation_entry.response = @message.conversation_entry.response.concat strings
  
      @robot.adapter.send @envelope, strings...  
    
    @robot.brain.on 'loaded', =>
      @robot.brain.data.conversations ?= {}
      @conversations = @robot.brain.data.conversations
  
  startConversation: (room, username) ->
    unless room? then room = '_private'

    unless @conversations[room]?
      @conversations[room] = {}

    unless @conversations[room][username]? and @conversations[room][username].add?
      @conversations[room][username] = new Conversation()

    @conversations[room][username]
  
  getConversation: (room, username) ->
    @startConversation room, username

  recordMessage: (msg) =>
    GLOBAL.lastMessage = msg
    @getConversation( msg.message.user.room, msg.message.user.name ).add? msg

  cacheResponse: (msg) =>
    lastMessage = @getConversation(msg.message.user.room, msg.message.user.name).lastEntry()
    
    if lastMessage? and lastMessage.response?
      @cachedResponses[lastMessage.text] = (msg) ->
        for response in lastMessage.response
          msg.send response

      return true
    else return false

  checkCache: (msg) =>
    if @cachedResponses[msg.match[1]] then @cachedResponses[msg.match[1]]

  respondCache: (msg) =>
    cacheFunction = @checkCache msg

    if cacheFunction?
      cacheFunction(msg)
      return true
    else return false

class Conversation
  messages: []
  
  constructor: (@keep = 10) ->


  add: (msg) =>
    entry = new ConversationEntry(msg)
    msg.message.conversation_entry = entry
    
    @messages.unshift entry
    while @messages.length > @keep
      @messages.pop()

  entryToString: (event) ->
    return "[#{event.hours}:#{event.minutes}] #{event.room} #{event.name}: #{event.message}"

  lastEntry: (offset = 0) ->
    @messages[offset]

  clear: ->
    @messages = []

class ConversationEntry
  constructor: (@msg) ->
    @name = @msg.message.user.name
    @room = @msg.message.user.room
    @text = @msg.message.text.replace(new RegExp("#{@msg.robot.name} ?", 'i'), '')
    @time = new Date()
    @hours = @time.getHours()
    @minutes = @time.getMinutes()
    @response = []
    if @minutes < 10
      @minutes = '0' + @minutes


module.exports = {
  HubotCache
}